generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  userId           String  @unique
  firstName        String
  lastName         String
  otherNames       String?
  age              Int
  weight           Int
  height           Int
  healthConditions String?

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  messages Message[]
}

model Hospital {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  location         String
  image            String
  type             HospitalType @default(Public)
  avg_waiting_time Int
  working_hours    String
  contact          String
  isFavourite      Boolean
  services         String
}

model Doctor {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  gender      Gender
  contact     String
  image       String
  specialty   String
  isFavourite Boolean

  // conversationIds String[]       @db.ObjectId
  // conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  // messages Message[]
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])

  // doctorIds String[] @db.ObjectId
  // doctors   Doctor[] @relation(fields: [doctorIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  // doctorSender Doctor @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Booking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId String
  doctorId  String
  date      DateTime
  reason    String
}

enum HospitalType {
  Private
  Public
  Specialist
}

enum Gender {
  Male
  Female
}
